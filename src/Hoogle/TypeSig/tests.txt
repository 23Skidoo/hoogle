-- really basic stuff
a £ TypeSig [] (TVar "a")
A £ TypeSig [] (TLit "A")
m a £ TypeSig [] (TApp (TVar "m") [TVar "a"])
M a b £ TypeSig [] (TApp (TLit "M") [TVar "a",TVar "b"])

-- lists and tuples
[a] £ TypeSig [] (TApp (TLit "[]") [TVar "a"])
[] a £ TypeSig [] (TApp (TLit "[]") [TVar "a"])
() £ TypeSig [] (TLit "()")
(a) £ TypeSig [] (TVar "a")
(a,b) £ TypeSig [] (TApp (TLit "(,)") [TVar "a",TVar "b"])
(,) a b £ TypeSig [] (TApp (TLit "(,)") [TVar "a",TVar "b"])

-- functions
(->) £ TypeSig [] (TLit "->")
a -> b £ TypeSig [] (TFun [TVar "a",TVar "b"])
a->b->c £ TypeSig [] (TFun [TVar "a",TVar "b",TVar "c"])
a -> (b -> c) £ TypeSig [] (TFun [TVar "a",TVar "b",TVar "c"])
(a -> b) -> c £ TypeSig [] (TFun [TFun [TVar "a",TVar "b"],TVar "c"])
M (a b) c £ TypeSig [] (TApp (TLit "M") [TApp (TVar "a") [TVar "b"],TVar "c"])

-- classes
Eq a => a £ TypeSig [TApp (TLit "Eq") [TVar "a"]] (TVar "a")
Class a b => a b £ TypeSig [TApp (TLit "Class") [TVar "a",TVar "b"]] (TApp (TVar "a") [TVar "b"])
(Ord a, Eq b) => a -> b £ TypeSig [TApp (TLit "Ord") [TVar "a"],TApp (TLit "Eq") [TVar "b"]] (TFun [TVar "a",TVar "b"])

-- real examples
(a -> b) -> [a] -> [b] £ TypeSig [] (TFun [TFun [TVar "a",TVar "b"],TApp (TLit "[]") [TVar "a"],TApp (TLit "[]") [TVar "b"]])
Monad a => (b -> a c) -> [b] -> a [c] £ TypeSig [TApp (TLit "Monad") [TVar "a"]] (TFun [TFun [TVar "b",TApp (TVar "a") [TVar "c"]],TApp (TLit "[]") [TVar "b"],TApp (TVar "a") [TApp (TLit "[]") [TVar "c"]]])
GraphM m gr => Node -> m (gr a b) -> m (Maybe [Node]) £ TypeSig [TApp (TLit "GraphM") [TVar "m",TVar "gr"]] (TFun [TLit "Node",TApp (TVar "m") [TApp (TVar "gr") [TVar "a",TVar "b"]],TApp (TVar "m") [TApp (TLit "Maybe") [TApp (TLit "[]") [TLit "Node"]]]])
Ix a => Array a b -> a -> b £ TypeSig [TApp (TLit "Ix") [TVar "a"]] (TFun [TApp (TLit "Array") [TVar "a",TVar "b"],TVar "a",TVar "b"])
