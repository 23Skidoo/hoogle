-- basic stuff
/info £ Query {scope = [], names = [], typeSig = Nothing, items = [], flags = [Info]}
/count 10 £ Query {scope = [], names = [], typeSig = Nothing, items = [], flags = [Count 10]}
map £ Query {scope = [], names = ["map"], typeSig = Nothing, items = [], flags = []}
concat map £ Query {scope = [], names = ["concat","map"], typeSig = Nothing, items = [], flags = []}
a -> b £ Query {scope = [], names = [], typeSig = Just (TypeSig [] (TFun [TVar "a",TVar "b"])), items = [], flags = []}
(a b) £ Query {scope = [], names = [], typeSig = Just (TypeSig [] (TApp (TVar "a") [TVar "b"])), items = [], flags = []}
map :: a -> b £ Query {scope = [], names = ["map"], typeSig = Just (TypeSig [] (TFun [TVar "a",TVar "b"])), items = [], flags = []}
+Data.Map map £ Query {scope = [PlusModule ["Data","Map"]], names = ["map"], typeSig = Nothing, items = [], flags = []}
Data.Map.map  £ Query {scope = [PlusModule ["Data","Map"]], names = ["map"], typeSig = Nothing, items = [], flags = []}
