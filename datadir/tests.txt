
@package default

module Foo

type FilePath = String
type String = [Char]
id :: a -> a
unsafeCoerce :: a -> b
map :: (a -> b) -> [a] -> [b]
flipmap :: [a] -> (a -> b) -> [b]
fmap :: Functor m => (a -> b) -> m a -> m b
unfmap :: (a -> b) -> m a -> m b
eq :: Eq a => (a -> b) -> m a -> m b
fst :: (a,b) -> a
snd :: (a,b) -> b
(==) :: Eq a => a -> a -> Bool
instance Eq Bool
instance Functor []
not :: Bool -> Bool
string :: String
chars :: [Char]


@test "id" id
@test "map" map fmap,unfmap
@test "(a -> b) -> [a] -> [b]" map fmap,unfmap
@test "(a -> b) -> [a] -> [b]" map flipmap
@test "a -> b" unsafeCoerce
@test "(c,d) -> d" snd fst
@test "(c,d) -> c" fst snd
@test "Bool -> Bool -> Bool" ==
@test "Bool -> Bool" not ==
@test ":: String" string chars
@test "[Char]" chars string
@test "Functor m => (a -> b) -> m a -> m b" fmap unfmap eq

-- tests that arguments are not reused
int2 :: Char -> Int -> Int
@test "Int -> Int -> Int" !int2

-- test that instances are applied properly
instance Ord Bar
ordId :: Ord a => a -> a
nonId :: Non a => a -> a
@test "Bar -> Bar" ordId,id nonId

-- test that packages can be searched for
@package pkg1
@package pkg2
@test "pkg" pkg1,pkg2
