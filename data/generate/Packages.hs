
module Packages(packages) where

import Util


-- return a list of packages
-- generate a result packages.txt
packages :: IO [Package]
packages = do
    (tar,b) <- mirror "packages/archive/00-index.tar.gz"
    when b $ do
        copyFile tar "temp/hackage/hackage.tar.gz"
        system_ $ "gunzip --force temp/hackage/hackage.tar.gz"
        system_ $ "tar -xf temp/hackage/hackage.tar -C temp/hackage"

    pkgs <- mapM resolve =<< lsDirectories "temp/hackage"
    docs <- mapM document pkgs
    writeFile "result/packages.txt" $ unlines $ hackagePrefix ++ concat docs
    return pkgs


resolve :: String -> IO Package
resolve name = do
    vers <- lsDirectories $ "temp/hackage/" ++ name
    let ver = showVersion $ maximum $ map readVersion vers
    return (name,ver)

    
document :: Package -> IO [String]
document (name,ver) = do
    cabal <- readCabal' $ "temp/hackage/" ++ name ++ "/" ++ ver ++ "/" ++ name ++ ".cabal"
    
    return $ [""] ++
             doc (cabalField True "synopsis" cabal ++ [""] ++ cabalField True "description" cabal) ++
             ["@package " ++ name, "@version " ++ ver
             ,"@hackage http://hackage.haskell.org/cgi-bin/hackage-scripts/package/" ++ name]


doc = map rtrim . zipWith (++) ("-- | " : repeat "--   ") . lines . haddock . unlines


hackagePrefix =
    ["-- Hoogle documentation, generated by Hoogle"
    ,"-- From http://hackage.haskell.org/"
    ,"-- See Hoogle, http://www.haskell.org/hoogle/"
    ]


-- Fix up some of the haddock documentation bits
-- Currently not done, should ideally be done by Haddock
-- Need to use GHC.parseHaddockComment, and therefore GHC API :-(
haddock :: String -> String
haddock x = x

